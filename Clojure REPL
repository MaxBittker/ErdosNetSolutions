;; This Clojure REPL is divided into two areas, top and bottom, delimited by a line of dashes. The top area shows code that's been executed in the REPL, standard out from running code, and the results of executed expressions. The bottom area allows Clojure code to be entered. The code can be executed by pressing shift+enter.

;; Try it now by typing (+ 1 1) in the bottom section and pressing shift+enter.

;; Working in another Clojure file and sending forms to the REPL is the most efficient way to work. Use the following key bindings to send code to the REPL. See the settings for more keybindings.

;; ctrl-, then b - execute block. Finds the block of Clojure code your cursor is in and executes that.

;; Try it now. Put your cursor inside this block and press ctrl and comma together,
;; release, then press b.
(+ 2 3)

;; ctrl-, s - Executes the selection. Sends the selected text to the REPL.

;; Try it now. Select these three lines and press ctrl and comma together,
;; release, then press s.
(println "hello 1")
(println "hello 2")
(println "hello 3")

;; You can disable this help text in the settings.
Starting REPL with lein in /home/max/.atom/packages/proto-repl/proto-no-proj
Default Proto REPL Leiningen project started
nREPL server started on port 39545 on host 127.0.0.1 - nrepl://127.0.0.1:39545
user=>
Refreshing code...
:reloading (user)
Default Proto REPL Leiningen project started
Refresh complete
(first '(1 23))
user=> 1
(first '(1 2 3))
user=> 1
(rest '(1 2 3))
user=> (2 3)
(uni-insert {} [1 0])
user=> CompilerException java.lang.RuntimeException: Unable to resolve symbol: uni-insert in this context, compiling:(/tmp/form-init7226628854192003357.clj:1:5) 
({} 1 2)
  
user=> 2
(({} 1 2) 1)
  
user=> ClassCastException java.lang.Long cannot be cast to clojure.lang.IFn  user/eval5531 (form-init7226628854192003357.clj:1)
((assoc {} 1 2) 1)
  
user=> 2
((assoc {} 1 8) 1)
  
user=> 8
((assoc {} 1 1) 1)
  
user=> 1
(set)
  
user=> ArityException Wrong number of args (0) passed to: core/set  clojure.lang.AFn.throwArity (AFn.java:429)
(set '())
  
user=> #{}
user=> nil
#{}
  
user=> #{}
(#{} 1)
   
  
user=> nil
(insert #{} 1)
   
  
user=> CompilerException java.lang.RuntimeException: Unable to resolve symbol: insert in this context, compiling:(/tmp/form-init7226628854192003357.clj:1:5) 
(assoc #{} 1)
   
  
user=> ArityException Wrong number of args (2) passed to: core/assoc--4371  clojure.lang.AFn.throwArity (AFn.java:429)
(assoc #{} 1 2)
   
  
user=> ClassCastException clojure.lang.PersistentHashSet cannot be cast to clojure.lang.Associative  clojure.lang.RT.assoc (RT.java:792)
(add #{} 1)
   
  
user=> CompilerException java.lang.RuntimeException: Unable to resolve symbol: add in this context, compiling:(/tmp/form-init7226628854192003357.clj:1:5) 
(cons #{} 1)
   
  
user=> IllegalArgumentException Don't know how to create ISeq from: java.lang.Long  clojure.lang.RT.seqFrom (RT.java:542)
(conj #{} 1)
   
  
user=> #{1}
(conj #{} 1)
   
  
user=> #{1}
((conj #{} 1) 1)
  
   
  
user=> 1
(if ((conj #{} 1) 1)
    :a
   
  
user=> RuntimeException EOF while reading, starting at line 1  clojure.lang.Util.runtimeException (Util.java:221)
(if ((conj #{} 1) 1)
    :a
    :b)
  
user=> :a
(if ((conj #{} 1) 2)
    :a
    :b)
  
user=> :b
(conj (conj #{} 1) 2)
  
   
  
user=> #{1 2}
(merge #{} #{1})
user=> #{#{1}}
(merge #{2} #{1})
user=> #{2 #{1}}
(merge-set #{2} #{1})
user=> CompilerException java.lang.RuntimeException: Unable to resolve symbol: merge-set in this context, compiling:(/tmp/form-init7226628854192003357.clj:1:5) 
(merge #{2} #{1})
user=> #{2 #{1}}
(merge #{2} 1)
user=> #{1 2}
(concat #{2} #{1})
user=> (2 1)
(#{2} #{1})
user=> nil
(conj #{2} #{1})
user=> #{2 #{1}}
(merge #{2} 1)
user=> #{1 2}
(list #{2} )
user=> (#{2})
(elements #{2} )
user=> CompilerException java.lang.RuntimeException: Unable to resolve symbol: elements in this context, compiling:(/tmp/form-init7226628854192003357.clj:1:5) 
(flatten #{2} )
user=> ()
(flatten #{2})
user=> ()
(items #{2})
user=> CompilerException java.lang.RuntimeException: Unable to resolve symbol: items in this context, compiling:(/tmp/form-init7226628854192003357.clj:1:5) 
(list #{2})
user=> (#{2})
(conj #{2})
user=> #{2}
(conj #{2} #{1})
user=> #{2 #{1}}
(into #{2} #{1})
user=> #{1 2}
(into #{2} #{1} #{3})
user=> NullPointerException   clojure.core.protocols/iter-reduce (protocols.clj:49)
(into #{2} #{1 3} )
user=> #{1 3 2}
--------------------
(uniq '(1 2 1))
